import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import time
from PIL import Image
import torch
from transformers import BartTokenizer, BartForConditionalGeneration
import os 

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="PLN para Investigaci√≥n Veterinaria",
    layout="wide",
    initial_sidebar_state="expanded",
)


# Cargar el modelo
@st.cache_resource
def load_model():
    MODEL_ID = "liinarodriguez/summarization"
    try:
        tokenizer = BartTokenizer.from_pretrained(MODEL_ID)
        model = BartForConditionalGeneration.from_pretrained(MODEL_ID)
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        model = model.to(device)
        return model, tokenizer, device
    except Exception as e:
        st.error(f"Error al cargar el modelo: {str(e)}")
        st.stop()


# Funci√≥n para resumir
def generate_summary(text, model, tokenizer, device):
    inputs = tokenizer(
        text,
        return_tensors="pt",
        max_length=1024,
        padding="max_length",
        truncation=True,
    ).to(device)

    with torch.no_grad():
        summary_ids = model.generate(
            inputs.input_ids,
            attention_mask=inputs.attention_mask,
            max_length=350,
            num_beams=10,
            length_penalty=1.2,
            early_stopping=True,
            no_repeat_ngram_size=3,
        )

    return tokenizer.decode(summary_ids[0], skip_special_tokens=True)


# Cargar el modelo al inicio
model, tokenizer, device = load_model()

# Estilos CSS personalizados
st.markdown(
    """
<style>
    @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap');
    
    :root {
        --primary: #4e89ae;
        --secondary: #ed6663;
        --accent: #ffa372;
        --light: #f8f9fa;
        --dark: #43658b;
    }
    
    * {
        font-family: 'Montserrat', sans-serif;
    }
    
    .stApp {
        background: linear-gradient(135deg, #f5f7fa 0%, #e4edf5 100%);
    }
    
    .title-box {
        background: linear-gradient(90deg, var(--primary) 0%, var(--dark) 100%);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
    }
    
    .card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 6px 12px rgba(0,0,0,0.05);
        margin-bottom: 1.5rem;
        border-left: 4px solid var(--secondary);
        transition: transform 0.3s ease;
    }
    
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 15px rgba(0,0,0,0.1);
    }
    
    .highlight {
        background: linear-gradient(120deg, rgba(237,102,99,0.2), rgba(237,102,99,0));
        padding: 0.2rem 0.5rem;
        border-radius: 4px;
        font-weight: 600;
    }
    
    .progress-bar {
        height: 8px;
        background: #e0e0e0;
        border-radius: 4px;
        overflow: hidden;
        margin: 1rem 0;
    }
    
    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, var(--accent), var(--secondary));
        transition: width 0.5s ease;
    }
    
    .tooltip {
        position: relative;
        display: inline-block;
        cursor: pointer;
    }
    
    .tooltip .tooltiptext {
        visibility: hidden;
        width: 220px;
        background-color: var(--dark);
        color: white;
        text-align: center;
        border-radius: 6px;
        padding: 10px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.3s;
        font-size: 0.85rem;
    }
    
    .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }
    
    .floating {
        animation: float 6s ease-in-out infinite;
    }
    
    @keyframes float {
        0% { transform: translateY(0px); }
        50% { transform: translateY(-15px); }
        100% { transform: translateY(0px); }
    }
</style>
""",
    unsafe_allow_html=True,
)

# T√≠tulo con dise√±o mejorado
st.markdown(
    '<div class="title-box"><h1 style="color:white; margin:0;">Paula y su Investigaci√≥n </h1></div>',
    unsafe_allow_html=True,
)

# Secci√≥n 1: Introducci√≥n con efecto de m√°quina de escribir
st.header("El reto de Paula", anchor="paula-challenge")

with st.expander("Ver la historia completa", expanded=True):
    challenge_text = """
    Paula es una estudiante de Medicina Veterinaria que se enfrenta al gran desaf√≠o de su trabajo de grado: 
    investigar el c√°ncer de mama en perras. Tiene una carpeta con m√°s de 100 art√≠culos cient√≠ficos, 
    pero poco tiempo para leerlos todos. Necesita encontrar r√°pidamente las tendencias actuales y extraer 
    informaci√≥n clave para su investigaci√≥n.
    """

    # Simulaci√≥n de m√°quina de escribir
    placeholder = st.empty()
    full_text = challenge_text
    current_text = ""

    for char in full_text:
        current_text += char
        placeholder.markdown(
            f'<div class="card"><p style="font-size:1.1rem;">{current_text}</p></div>',
            unsafe_allow_html=True,
        )
        time.sleep(0.03)

    # Imagen ilustrativa con efecto flotante
    st.markdown(
        '<div class="floating" style="text-align:center; margin:2rem 0;">',
        unsafe_allow_html=True,
    )

    st.markdown("</div>", unsafe_allow_html=True)

# Secci√≥n 2: Descubre la app con simulaci√≥n interactiva
st.header("Descubre la herramienta de PLN", anchor="discover-tool")

st.markdown(
    """
<div class="card">
    <p style="font-size:1.1rem;">
    Un d√≠a, Paula encuentra una aplicaci√≥n que promete algo incre√≠ble: 
    <span class="highlight">resumir art√≠culos cient√≠ficos autom√°ticamente</span> y mostrar los 
    <span class="highlight">temas m√°s comunes</span> con solo arrastrar sus archivos.
    </p>
</div>
""",
    unsafe_allow_html=True,
)

# Simulaci√≥n de carga de archivos
st.subheader("Simula la experiencia de Paula")
st.markdown(
    """
<div class="card">
    <p>Selecciona el modo de entrada que quieres probar:</p>
</div>
""",
    unsafe_allow_html=True,
)

input_type = st.radio(
    "",
    [
        "üìö Usar art√≠culos de ejemplo",
        "üìÇ Subir mis propios archivos",
    ],
)

if input_type == "üìö Usar art√≠culos de ejemplo":
    st.info("Estos son algunos art√≠culos de muestra sobre oncolog√≠a veterinaria")

    # Leer los archivos de ejemplo
    sample_files = {}
    sample_path = os.path.join(os.path.dirname(__file__), "samples")

    for filename in os.listdir(sample_path):
        if filename.endswith(".txt"):
            with open(os.path.join(sample_path, filename), "r", encoding="utf-8") as f:
                sample_files[filename] = f.read()

    # Selector de archivo
    selected_file = st.selectbox(
        "Selecciona un art√≠culo para analizar:", list(sample_files.keys())
    )

    if selected_file:
        text = sample_files[selected_file]
        st.markdown(
            """
        <div class="card">
            <h4>Contenido del art√≠culo</h4>
            <div style="max-height: 300px; overflow-y: auto; padding: 1rem; background-color: #f8f9fa; border-radius: 8px;">
            {}</div>
        </div>
        """.format(
                text.replace("\n", "<br>")
            ),
            unsafe_allow_html=True,
        )

        if st.button("‚ú® Generar resumen"):
            with st.spinner("Analizando el art√≠culo..."):
                resumen = generate_summary(text, model, tokenizer, device)

                st.markdown(
                    """
                <div class="card">
                    <h4>Resumen generado üìù</h4>
                    <div style="background-color:#e8f4f8; padding:1rem; border-radius:8px; border-left:4px solid var(--primary);">
                    {}</div>
                </div>
                """.format(
                        resumen
                    ),
                    unsafe_allow_html=True,
                )

                # M√©tricas
                col1, col2, col3 = st.columns(3)
                words_original = len(text.split())
                words_summary = len(resumen.split())
                reduction = ((words_original - words_summary) / words_original) * 100

                col1.metric("Palabras en original", words_original)
                col2.metric("Palabras en resumen", words_summary)
                col3.metric("Reducci√≥n", f"{reduction:.1f}%")

elif input_type == "üìÇ Subir mis propios archivos":
    uploaded_files = st.file_uploader(
        "Arrastra tus archivos aqu√≠",
        type=["pdf", "txt", "csv"],
        accept_multiple_files=True,
    )
    if uploaded_files:
        st.success(f"{len(uploaded_files)} archivos cargados exitosamente!")

        # Barra de progreso simulada
        st.markdown(
            '<div class="card"><p>Analizando documentos...</p></div>',
            unsafe_allow_html=True,
        )
        progress_bar = st.empty()
        progress_text = st.empty()

        for percent in range(0, 101, 5):
            progress_bar.markdown(
                f"""
            <div class="progress-bar">
                <div class="progress-fill" style="width:{percent}%"></div>
            </div>
            """,
                unsafe_allow_html=True,
            )
            progress_text.text(f"Progreso: {percent}%")
            time.sleep(0.1)

        st.balloons()
        st.success("An√°lisis completado! Ver resultados abajo")

# Secci√≥n 3: Resultados visuales interactivos
st.header("¬øQu√© encuentra Paula?", anchor="paula-findings")

# Gr√°fico de temas con selecci√≥n interactiva
st.markdown(
    """
<div class="card">
    <p>Despu√©s de cargar sus art√≠culos, la herramienta le presenta los siguientes t√≥picos m√°s frecuentes:</p>
</div>
""",
    unsafe_allow_html=True,
)

topics = {
    "Topic 1: Biolog√≠a molecular y procesos celulares": 22,
    "Topic 2 Biotecnolog√≠a aplicada": 11,
    "Topic 3 Inteligencia artificial en medicina": 24,
    "Topic 4 Patolog√≠a cl√≠nica e histol√≥gica": 28,
    "Topic 5 An√°lisis de im√°genes m√©dicas": 25,
}

# Convertir a DataFrame para mejor visualizaci√≥n
df_topics = pd.DataFrame(
    {"Tema": list(topics.keys()), "Art√≠culos": list(topics.values())}
)

# Gr√°fico interactivo
st.subheader("Distribuci√≥n de temas en la literatura")
tab1, tab2= st.tabs(["Gr√°fico de Barras", ""])

with tab1:
    fig, ax = plt.subplots(figsize=(10, 6))
    colors = plt.cm.PuBu(np.linspace(0.4, 1, len(topics)))
    df_topics.sort_values("Art√≠culos", ascending=True).plot.barh(
        x="Tema", y="Art√≠culos", ax=ax, color=colors
    )
    ax.set_title("T√≥picos m√°s frecuentes en oncolog√≠a veterinaria", fontsize=14)
    ax.set_xlabel("N√∫mero de art√≠culos", fontsize=12)
    ax.grid(axis="x", linestyle="--", alpha=0.7)
    st.pyplot(fig)


# Secci√≥n 4: Impacto con visualizaci√≥n de m√©tricas
st.header("Impacto para Paula", anchor="impact")

cols = st.columns(2)
cols[0].metric("Art√≠culos procesados", "110", "100% de su colecci√≥n")
cols[1].metric("Temas identificados", "5", "Tendencias clave")

st.markdown(
    """
<div class="card">
    <h4>Gracias a la herramienta, Paula:</h4>
    <ul>
        <li>Redujo el tiempo de revisi√≥n de literatura en m√°s de un 60%</li>
        <li>Identific√≥ tendencias clave para enfocar su investigaci√≥n</li>
        <li>Sintetiz√≥ informaci√≥n t√©cnica sin perder calidad</li>
        <li>Pudo dedicar m√°s tiempo al an√°lisis y redacci√≥n</li>
        <li>Descubri√≥ conexiones entre estudios que hab√≠a pasado por alto</li>
    </ul>
</div>
""",
    unsafe_allow_html=True,
)

# Secci√≥n final con conclusi√≥n interactiva
st.header("Conclusi√≥n", anchor="conclusion")

st.markdown(
    """
<div class="card">
    <div style="text-align:center; padding:2rem;">
        <h3 style="color:var(--dark);">Transformando datos en conocimiento</h3>
        <p style="font-size:1.2rem;">
        Esta es la historia de c√≥mo el <span class="highlight">Procesamiento de Lenguaje Natural</span> 
        y <span class="highlight">Streamlit</span> ayudaron a Paula a transformar monta√±as de datos 
        en conocimiento accionable para su investigaci√≥n.
        </p>
        <div style="margin:2rem 0;">
            <img src="https://images.unsplash.com/photo-1558494940-1b7b0b7a5d9a" 
                 width="300" style="border-radius:50%; border:4px solid var(--accent);">
        </div>
        <button style="background:linear-gradient(90deg, var(--accent), var(--secondary)); 
                      color:white; border:none; padding:0.8rem 2rem; border-radius:30px; 
                      font-size:1.1rem; cursor:pointer; margin-top:1rem;">
            Comienza tu propia investigaci√≥n!
        </button>
    </div>
</div>
""",
    unsafe_allow_html=True,
)

# Notas finales
st.markdown("---")
st.caption(
    "Herramienta educativa desarrollada para demostrar el poder del PLN en investigaci√≥n cient√≠fica. "
   
)
